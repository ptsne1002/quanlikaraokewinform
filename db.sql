create table employee(
	employeeid number GENERATED ALWAYS AS IDENTITY primary key,
	employeename nvarchar2(100),
	phone nvarchar2(20),
	address nvarchar2(100),
	role nvarchar2(100),
	salary int,
	birthday date,
	gender nvarchar2(20)
	);

create table account(
	username nvarchar2(100) primary key,
	password nvarchar2(100),
	employeeid int,
	foreign key(employeeid) references employee(employeeid));


create table room(
	roomid number GENERATED ALWAYS AS IDENTITY primary key,
	roomname nvarchar2(100),
	type nvarchar2(200),
	priceperhour int,
	status nvarchar2(50)
);

create table service(
	serviceid NUMBER GENERATED by default on null as IDENTITY,
	servicename nvarchar2(100),
	price int,
    primary key (serviceid)
);

drop table service;


INSERT INTO employee ( employeename, phone, address, role, salary, birthday, gender) VALUES
( 'Ph?m Ti?n S?', '0868686868', 'Gia Lai City', 'Admin', 9999, to_date('10/02/2000' ,'dd/mm/yyyy'), 'Nam');
INSERT INTO employee ( employeename, phone, address, role, salary, birthday, gender) VALUES
( 'Ph?m V?n Nh?n', '087878787', 'Bình Thu?n City', 'Staff', 99999, to_date('10/07/2000' ,'dd/mm/yyyy'), 'Nam');
INSERT INTO employee ( employeename, phone, address, role, salary, birthday, gender) VALUES
( 'q?ewe', '089898989', 'Hw City', 'Staff', 9999, to_date('10/04/2000' ,'dd/mm/yyyy'), 'Nam');

INSERT INTO account (username, password, employeeid) VALUES('pts', 'pts', 1);


INSERT INTO room ( roomname, type, priceperhour, status) VALUES
( 'A1.1', 'Phòng Th??ng', 150000, NULL);
INSERT INTO room ( roomname, type, priceperhour, status) VALUES
( 'A1.2', 'Phòng Th??ng', 150000, NULL);
INSERT INTO room ( roomname, type, priceperhour, status) VALUES
( 'A1.3', 'Phòng Th??ng', 150000, NULL);
INSERT INTO room ( roomname, type, priceperhour, status) VALUES
( 'A1.4', 'Phòng Th??ng', 150000, NULL);


select employeeid from account where username = 'pts' and password = 'pts';

select * from account where employeeid='1';


select * from account where employeeid='1';

update account set password='pts1' where username = 'pts' and employeeid = '1';

select * from employee order by employeeid ASC; 

insert into service(servicename ,price) values ('bò húc',12000);
insert into service(servicename ,price) values ('trái cây',50000);

/* trigger for db */

create or replace trigger insert_stt_for_room
before insert on room
for each row
begin 
    :new.status := 'Already' ;
end;

create or replace trigger set_price_for_room
before insert or update on room
for each row
begin 
    if :new.type = 'Normal' then
        :new.priceperhour := 150000;
    ELSIF :new.type = 'Vip' then
        :new.priceperhour := 200000;
    end if;
end;

select * from room;

insert into room(roomname, type) values('A1.5','Normal');
insert into room(roomname, type) values('A1.6','Vip');

create table customer(
    customerid number GENERATED ALWAYS AS IDENTITY primary key,
    name nvarchar2(100),
    phone varchar2(11));

create table invoice(
    orderid number GENERATED ALWAYS AS IDENTITY primary key,
    bookingid number,
    timeend date,
    totalprice number,
    createdby number,
    foreign key(createdby) references employee(employeeid),
    foreign key(bookingid) references booking(bookingid));

--drop table orders;
select * from orders;

create table booking(
    bookingid number GENERATED ALWAYS AS IDENTITY primary key,
    roomid number,
    empid number,
    customerid number,
    timecreated date,
    status nvarchar2(40),
    foreign key(empid) references employee(employeeid),
    foreign key(roomid) references room(roomid),
    foreign key(customerid) references customer(customerid)
)

create or replace trigger set_stt_for_booking
before insert on invoice
for each row
begin
    update booking
    set status = 'Done'
    where bookingid = :new.bookingid;
end;

create or replace trigger change_stt_room
before insert on booking
for each row
begin
    :new.status := 'Using';
    update room
    set status = 'Busy'
    where roomid = :new.roomid;
end;

create or replace trigger change_stt_room2
before update on booking
for each row
begin
    if :new.status ='Done' then
        update room
        set status = 'Already'
        where roomid = :new.roomid;
    end if;
end;

--set serveroutput on;
--
--declare 
--    now date;
--begin
--    now := to_date(SYSTIMESTAMP,'DD-MM-YYYY MI:HH');
--    DBMS_OUTPUT.PUT_LINE(now);
--end;

insert into customer(name,phone) values('Pham tien sy','012399');

select * from room;

insert into booking(roomid, empid,customerid) values('1','1','1');

insert into invoice(bookingid) values(1);

update room
set status = 'Already'
where type = 'Normal';
commit;
insert into room(roomname, type) values('A1.7','Vip');
select * from room;

select * from customer order by customerid ASC









